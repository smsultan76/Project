
4x4 matrix keyboard with mocroprocessor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000268  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000268  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000885  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000686  00000000  00000000  00000c29  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c6  00000000  00000000  000012af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001678  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003de  00000000  00000000  000016dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ca  00000000  00000000  00001aba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001d84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  7a:	0c 94 32 01 	jmp	0x264	; 0x264 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <init_peripherals>:
{'4', '5', '6', '*'},
{'1', '2', '3', '-'},
{'C', '0', '=', '+'}
};
void init_peripherals() {
DDRD = 0xFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	81 bb       	out	0x11, r24	; 17
PORTD = 0x00;
  86:	12 ba       	out	0x12, r1	; 18
DDRC = 0x0F;
  88:	8f e0       	ldi	r24, 0x0F	; 15
  8a:	84 bb       	out	0x14, r24	; 20
PORTC = 0xF0;
  8c:	80 ef       	ldi	r24, 0xF0	; 240
  8e:	85 bb       	out	0x15, r24	; 21
  90:	08 95       	ret

00000092 <read_keypad>:
}
char read_keypad() {
for (uint8_t row = 0; row < 4; row++) {
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	3a c0       	rjmp	.+116    	; 0x10a <read_keypad+0x78>
PORTC = ~(1 << row);
  96:	e3 2f       	mov	r30, r19
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	03 2e       	mov	r0, r19
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <read_keypad+0x14>
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	0a 94       	dec	r0
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <read_keypad+0x10>
  aa:	80 95       	com	r24
  ac:	85 bb       	out	0x15, r24	; 21
for (uint8_t col = 0; col < 4; col++) {
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	29 c0       	rjmp	.+82     	; 0x104 <read_keypad+0x72>
if (!(PINC & (1 << (col + 4)))) {
  b2:	83 b3       	in	r24, 0x13	; 19
  b4:	62 2f       	mov	r22, r18
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	ab 01       	movw	r20, r22
  ba:	4c 5f       	subi	r20, 0xFC	; 252
  bc:	5f 4f       	sbci	r21, 0xFF	; 255
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	04 2e       	mov	r0, r20
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <read_keypad+0x36>
  c4:	95 95       	asr	r25
  c6:	87 95       	ror	r24
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <read_keypad+0x32>
  cc:	80 fd       	sbrc	r24, 0
  ce:	19 c0       	rjmp	.+50     	; 0x102 <read_keypad+0x70>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	83 ed       	ldi	r24, 0xD3	; 211
  d2:	90 e3       	ldi	r25, 0x30	; 48
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <read_keypad+0x42>
  d8:	00 c0       	rjmp	.+0      	; 0xda <read_keypad+0x48>
  da:	00 00       	nop
_delay_ms(50);
if (!(PINC & (1 << (col + 4)))) {
  dc:	83 b3       	in	r24, 0x13	; 19
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <read_keypad+0x54>
  e2:	95 95       	asr	r25
  e4:	87 95       	ror	r24
  e6:	4a 95       	dec	r20
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <read_keypad+0x50>
  ea:	80 fd       	sbrc	r24, 0
  ec:	0a c0       	rjmp	.+20     	; 0x102 <read_keypad+0x70>
return keypad_mapping[row][col];
  ee:	ee 0f       	add	r30, r30
  f0:	ff 1f       	adc	r31, r31
  f2:	ee 0f       	add	r30, r30
  f4:	ff 1f       	adc	r31, r31
  f6:	e0 5a       	subi	r30, 0xA0	; 160
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	e6 0f       	add	r30, r22
  fc:	f7 1f       	adc	r31, r23
  fe:	80 81       	ld	r24, Z
 100:	08 95       	ret
PORTC = 0xF0;
}
char read_keypad() {
for (uint8_t row = 0; row < 4; row++) {
PORTC = ~(1 << row);
for (uint8_t col = 0; col < 4; col++) {
 102:	2f 5f       	subi	r18, 0xFF	; 255
 104:	24 30       	cpi	r18, 0x04	; 4
 106:	a8 f2       	brcs	.-86     	; 0xb2 <read_keypad+0x20>
PORTD = 0x00;
DDRC = 0x0F;
PORTC = 0xF0;
}
char read_keypad() {
for (uint8_t row = 0; row < 4; row++) {
 108:	3f 5f       	subi	r19, 0xFF	; 255
 10a:	34 30       	cpi	r19, 0x04	; 4
 10c:	20 f2       	brcs	.-120    	; 0x96 <read_keypad+0x4>
return keypad_mapping[row][col];
}
}
}
}
return '\0';
 10e:	80 e0       	ldi	r24, 0x00	; 0
}
 110:	08 95       	ret

00000112 <display_digit>:
void display_digit(uint8_t digit) {
PORTD = segment_display[digit];
 112:	e8 2f       	mov	r30, r24
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	e0 59       	subi	r30, 0x90	; 144
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	80 81       	ld	r24, Z
 11c:	82 bb       	out	0x12, r24	; 18
 11e:	08 95       	ret

00000120 <perform_calculation>:
}
uint8_t perform_calculation(uint8_t operand1, uint8_t operand2, char operator) {
switch (operator) {
 120:	4b 32       	cpi	r20, 0x2B	; 43
 122:	49 f0       	breq	.+18     	; 0x136 <perform_calculation+0x16>
 124:	18 f4       	brcc	.+6      	; 0x12c <perform_calculation+0xc>
 126:	4a 32       	cpi	r20, 0x2A	; 42
 128:	51 f0       	breq	.+20     	; 0x13e <perform_calculation+0x1e>
 12a:	12 c0       	rjmp	.+36     	; 0x150 <perform_calculation+0x30>
 12c:	4d 32       	cpi	r20, 0x2D	; 45
 12e:	29 f0       	breq	.+10     	; 0x13a <perform_calculation+0x1a>
 130:	4f 32       	cpi	r20, 0x2F	; 47
 132:	49 f0       	breq	.+18     	; 0x146 <perform_calculation+0x26>
 134:	0d c0       	rjmp	.+26     	; 0x150 <perform_calculation+0x30>
case '+': return operand1 + operand2;
 136:	86 0f       	add	r24, r22
 138:	08 95       	ret
case '-': return operand1 - operand2;
 13a:	86 1b       	sub	r24, r22
 13c:	08 95       	ret
case '*': return operand1 * operand2;
 13e:	86 9f       	mul	r24, r22
 140:	80 2d       	mov	r24, r0
 142:	11 24       	eor	r1, r1
 144:	08 95       	ret
case '/': return (operand2 != 0) ? operand1 / operand2 : 0;
 146:	66 23       	and	r22, r22
 148:	29 f0       	breq	.+10     	; 0x154 <perform_calculation+0x34>
 14a:	0e 94 26 01 	call	0x24c	; 0x24c <__udivmodqi4>
 14e:	08 95       	ret
default: return 0;
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	08 95       	ret
uint8_t perform_calculation(uint8_t operand1, uint8_t operand2, char operator) {
switch (operator) {
case '+': return operand1 + operand2;
case '-': return operand1 - operand2;
case '*': return operand1 * operand2;
case '/': return (operand2 != 0) ? operand1 / operand2 : 0;
 154:	80 e0       	ldi	r24, 0x00	; 0
default: return 0;
}
}
 156:	08 95       	ret

00000158 <main>:
int main() {
init_peripherals();
 158:	0e 94 41 00 	call	0x82	; 0x82 <init_peripherals>
uint8_t operand1 = 0, operand2 = 0, result = 0;
char operator = '\0', key;
 15c:	10 e0       	ldi	r17, 0x00	; 0
default: return 0;
}
}
int main() {
init_peripherals();
uint8_t operand1 = 0, operand2 = 0, result = 0;
 15e:	d0 e0       	ldi	r29, 0x00	; 0
 160:	c0 e0       	ldi	r28, 0x00	; 0
char operator = '\0', key;
while (1) {
key = read_keypad();
 162:	0e 94 49 00 	call	0x92	; 0x92 <read_keypad>
if (key != '\0') {
 166:	88 23       	and	r24, r24
 168:	e1 f3       	breq	.-8      	; 0x162 <main+0xa>
if (key >= '0' && key <= '9') { 
 16a:	90 ed       	ldi	r25, 0xD0	; 208
 16c:	98 0f       	add	r25, r24
 16e:	9a 30       	cpi	r25, 0x0A	; 10
 170:	a0 f5       	brcc	.+104    	; 0x1da <main+0x82>
if (operator == '\0') {
 172:	11 11       	cpse	r17, r1
 174:	19 c0       	rjmp	.+50     	; 0x1a8 <main+0x50>
operand1 = operand1 * 10 + (key - '0');
 176:	cc 0f       	add	r28, r28
 178:	9c 2f       	mov	r25, r28
 17a:	99 0f       	add	r25, r25
 17c:	99 0f       	add	r25, r25
 17e:	c9 0f       	add	r28, r25
 180:	8c 0f       	add	r24, r28
 182:	c0 ed       	ldi	r28, 0xD0	; 208
 184:	c8 0f       	add	r28, r24
display_digit(operand1 % 10);
 186:	9d ec       	ldi	r25, 0xCD	; 205
 188:	c9 9f       	mul	r28, r25
 18a:	91 2d       	mov	r25, r1
 18c:	11 24       	eor	r1, r1
 18e:	96 95       	lsr	r25
 190:	96 95       	lsr	r25
 192:	96 95       	lsr	r25
 194:	99 0f       	add	r25, r25
 196:	89 2f       	mov	r24, r25
 198:	88 0f       	add	r24, r24
 19a:	88 0f       	add	r24, r24
 19c:	98 0f       	add	r25, r24
 19e:	8c 2f       	mov	r24, r28
 1a0:	89 1b       	sub	r24, r25
 1a2:	0e 94 89 00 	call	0x112	; 0x112 <display_digit>
 1a6:	4b c0       	rjmp	.+150    	; 0x23e <main+0xe6>
} else {
operand2 = operand2 * 10 + (key - '0');
 1a8:	dd 0f       	add	r29, r29
 1aa:	9d 2f       	mov	r25, r29
 1ac:	99 0f       	add	r25, r25
 1ae:	99 0f       	add	r25, r25
 1b0:	d9 0f       	add	r29, r25
 1b2:	8d 0f       	add	r24, r29
 1b4:	d0 ed       	ldi	r29, 0xD0	; 208
 1b6:	d8 0f       	add	r29, r24
display_digit(operand2 % 10);
 1b8:	9d ec       	ldi	r25, 0xCD	; 205
 1ba:	d9 9f       	mul	r29, r25
 1bc:	91 2d       	mov	r25, r1
 1be:	11 24       	eor	r1, r1
 1c0:	96 95       	lsr	r25
 1c2:	96 95       	lsr	r25
 1c4:	96 95       	lsr	r25
 1c6:	99 0f       	add	r25, r25
 1c8:	89 2f       	mov	r24, r25
 1ca:	88 0f       	add	r24, r24
 1cc:	88 0f       	add	r24, r24
 1ce:	98 0f       	add	r25, r24
 1d0:	8d 2f       	mov	r24, r29
 1d2:	89 1b       	sub	r24, r25
 1d4:	0e 94 89 00 	call	0x112	; 0x112 <display_digit>
 1d8:	32 c0       	rjmp	.+100    	; 0x23e <main+0xe6>
}
} else if (key == '+' || key == '-' || key == '*' || key == '/') {
 1da:	8b 32       	cpi	r24, 0x2B	; 43
 1dc:	49 f1       	breq	.+82     	; 0x230 <main+0xd8>
 1de:	8d 32       	cpi	r24, 0x2D	; 45
 1e0:	49 f1       	breq	.+82     	; 0x234 <main+0xdc>
 1e2:	8a 32       	cpi	r24, 0x2A	; 42
 1e4:	49 f1       	breq	.+82     	; 0x238 <main+0xe0>
 1e6:	8f 32       	cpi	r24, 0x2F	; 47
 1e8:	49 f1       	breq	.+82     	; 0x23c <main+0xe4>
operator = key;
} else if (key == '=') {
 1ea:	8d 33       	cpi	r24, 0x3D	; 61
 1ec:	d1 f4       	brne	.+52     	; 0x222 <main+0xca>
result = perform_calculation(operand1, operand2, operator);
 1ee:	41 2f       	mov	r20, r17
 1f0:	6d 2f       	mov	r22, r29
 1f2:	8c 2f       	mov	r24, r28
 1f4:	0e 94 90 00 	call	0x120	; 0x120 <perform_calculation>
 1f8:	c8 2f       	mov	r28, r24
operand1 = result;
operand2 = 0;
operator = '\0';
display_digit(result % 10);
 1fa:	8d ec       	ldi	r24, 0xCD	; 205
 1fc:	c8 9f       	mul	r28, r24
 1fe:	81 2d       	mov	r24, r1
 200:	11 24       	eor	r1, r1
 202:	86 95       	lsr	r24
 204:	86 95       	lsr	r24
 206:	86 95       	lsr	r24
 208:	88 0f       	add	r24, r24
 20a:	98 2f       	mov	r25, r24
 20c:	99 0f       	add	r25, r25
 20e:	99 0f       	add	r25, r25
 210:	89 0f       	add	r24, r25
 212:	9c 2f       	mov	r25, r28
 214:	98 1b       	sub	r25, r24
 216:	89 2f       	mov	r24, r25
 218:	0e 94 89 00 	call	0x112	; 0x112 <display_digit>
operator = key;
} else if (key == '=') {
result = perform_calculation(operand1, operand2, operator);
operand1 = result;
operand2 = 0;
operator = '\0';
 21c:	10 e0       	ldi	r17, 0x00	; 0
} else if (key == '+' || key == '-' || key == '*' || key == '/') {
operator = key;
} else if (key == '=') {
result = perform_calculation(operand1, operand2, operator);
operand1 = result;
operand2 = 0;
 21e:	d0 e0       	ldi	r29, 0x00	; 0
 220:	0e c0       	rjmp	.+28     	; 0x23e <main+0xe6>
operator = '\0';
display_digit(result % 10);
} else if (key == 'C') {
 222:	83 34       	cpi	r24, 0x43	; 67
 224:	61 f4       	brne	.+24     	; 0x23e <main+0xe6>
operand1 = operand2 = result = 0;
operator = '\0';
PORTD = 0x00;
 226:	12 ba       	out	0x12, r1	; 18
operand2 = 0;
operator = '\0';
display_digit(result % 10);
} else if (key == 'C') {
operand1 = operand2 = result = 0;
operator = '\0';
 228:	10 e0       	ldi	r17, 0x00	; 0
operand1 = result;
operand2 = 0;
operator = '\0';
display_digit(result % 10);
} else if (key == 'C') {
operand1 = operand2 = result = 0;
 22a:	d0 e0       	ldi	r29, 0x00	; 0
 22c:	c0 e0       	ldi	r28, 0x00	; 0
 22e:	07 c0       	rjmp	.+14     	; 0x23e <main+0xe6>
} else {
operand2 = operand2 * 10 + (key - '0');
display_digit(operand2 % 10);
}
} else if (key == '+' || key == '-' || key == '*' || key == '/') {
operator = key;
 230:	18 2f       	mov	r17, r24
 232:	05 c0       	rjmp	.+10     	; 0x23e <main+0xe6>
 234:	18 2f       	mov	r17, r24
 236:	03 c0       	rjmp	.+6      	; 0x23e <main+0xe6>
 238:	18 2f       	mov	r17, r24
 23a:	01 c0       	rjmp	.+2      	; 0x23e <main+0xe6>
 23c:	18 2f       	mov	r17, r24
 23e:	8f e4       	ldi	r24, 0x4F	; 79
 240:	93 ec       	ldi	r25, 0xC3	; 195
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <main+0xea>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0xf0>
 248:	00 00       	nop
 24a:	8b cf       	rjmp	.-234    	; 0x162 <main+0xa>

0000024c <__udivmodqi4>:
 24c:	99 1b       	sub	r25, r25
 24e:	79 e0       	ldi	r23, 0x09	; 9
 250:	04 c0       	rjmp	.+8      	; 0x25a <__udivmodqi4_ep>

00000252 <__udivmodqi4_loop>:
 252:	99 1f       	adc	r25, r25
 254:	96 17       	cp	r25, r22
 256:	08 f0       	brcs	.+2      	; 0x25a <__udivmodqi4_ep>
 258:	96 1b       	sub	r25, r22

0000025a <__udivmodqi4_ep>:
 25a:	88 1f       	adc	r24, r24
 25c:	7a 95       	dec	r23
 25e:	c9 f7       	brne	.-14     	; 0x252 <__udivmodqi4_loop>
 260:	80 95       	com	r24
 262:	08 95       	ret

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
